{
"Description_of_labels": "Name of variable in Matlab; Matlab setup file name in which variable defined; matlab variable value (python variable value; Do we need to [FIX] this or is it [OK]",
"Nagents":   "NumOfPeople; EstimateRhoAndBetahat.m; 10000 (10000); OK",
"Nagents_bootstrap":"NumOfPeopleBootstrap; EstimateRhoAndBetahat.m; 10000 (NONE; doesn't exist in Python); FIX? Maybe..",
"total_simuation_periods_including_T": "PeriodsToSolve; setup_params.m; 90-25 (65 in py); OK.",
"seed":      17891013848112,
"base0indexretire":  40,
"rho_first_guess":   "x0(1); EstimateRhoAndBetahat.m; 4.0 (4.0); OK",
"beta_first_guess":  "x0(2); EstimateRhoAndBetahat.m; 0.99 (0.99); OK",
"beta_lower_bound":  0.0001,
"beta_upper_bound":  15.0,
"rho_lower_bound":   0.0001,
"rho_upper_bound":   15.0,
"upper_lower_bounds_comment": "The upper and lower bounds are used in the 'errors_model_vs_data' function. Some of the derivative-free optimization routines can explore outside reasonable (economic) ranges for the beta and rho paramters, eg beta < 0. These bounds ensure that the 'errors' function will return an extrememly high value outside of the bounds.",
"R":   "RFree; setup_params.m; 1.03 (1.03); OK",
"psi_N":   "NumOfShockPoints; setup_params.m; 8 (6 in py); FIX.",
"xi_N":   "NumOfShockPoints; setup_params.m; 8 (6 in py); FIX.",
"p_unemploy":   "pUnemp; setup_params.m; 0 (0.005 in py); FIX",
"p_unemploy_retire":   "pRetire; setup_params.m; 0 (0.0005 in py); FIX",
"value_unemploy":   "hardcoded as 0; setup_shocks.m; 0 (0.0); OK",
"value_unemploy_retire":  "hardcoded as 0; setup_shocks.m; 0 (0.0); OK",
"spline_k":   "NA;NA; 1 implicitly (1); OK",
"grid_type":   "NA;NA; exp_mult implicitly (exp_mult); OK",
"exp_nest":   "NA;NA; 3 implicitly (3); OK",
"final_work_index":  25,
"final_work_age": 65,
"final_work_age_comment": "Currently not used.",
"constrained":   "Constrained; setup_params.m; 0 (false in py); OK",
"a_min":   "AlphaMin; setup_params.m; 0.00001 (0.001); FIX",
"a_max":   "AlphaMax; setup_params.m; 4 (4.0); OK", 
"NEW_a_huge":  "AlphaHuge;setup_params.m; 5 (NONE); FIX",
"NEW_a_huge_comment": "Value of Alpha at which we connect to perf foresight function; believe used in Method Mod; FIX",
"a_size":   "n; setup_params.m; 10 (5); FIX",
"a_extra":   "Not in Matlab params setup; hardcoded. __?__ (0.03); FIX",
"a_extra_comment":   "Need to ask Chris why this is added to all vectors. FIX",
"bootstrap_sample_size":  "NumOfBootstrap; EstimateRhoAndBetahat.m; 30 (50); FIX",
"NEW_initial_wealth_income_ratio_for_estimation": "InitialWYRatio; setup_params.m; [0.17, .5, .83]  (NONE); FIX",
"NEW_initial_wealth_income_ratio_for_estimation_comment": "Note that we should likely have other possible string-based 'flags' here which indicate to the code to use bootstrapping or similar during setup. FIX",
"NEW_initial_wealth_income_ratio_prob": "InitialWYRatioProb; setup_params.m; [.33333, .33333, .33334]  (NONE); FIX",
"NEW_initial_wealth_income_ratio_variance": "VarInitialLogInc; setup_params.m; .3329  (NONE); FIX",

"quantile_to_match": "pi; setup_params.m; 0.5 [median] (NONE in python -- see where this used in Matlab, implement same estimator in Python, as quickly as possible.)",

"cohort_age_groups":{"1" : [ 26,27,28,29,30 ],
                     "2" : [ 31,32,33,34,35 ],
                     "3" : [ 36,37,38,39,40 ],
                     "4" : [ 41,42,43,44,45 ],
                     "5" : [ 46,47,48,49,50 ],
                     "6" : [ 51,52,53,54,55 ],
                     "7" : [ 56,57,58,59,60 ]},
"cohort_age_groups_comment": "Note that the above is not used in the MATLAB code. We likely want to *perhaps* add an explicit usage there, to ensure that we get the correct values matching in the SCF code.",

"psi_sigma": "SIGMAPerm; setup_params.m; VERY DIFFERENT; FIX",
"xi_sigma":  "SIGMATran; setup_params.m; VERY DIFFERENT; FIX",
"Gamma_vector":   "GList; setup_GList.m;"
[1.0,   1.0,   1.0,   1.0,   1.0,
1.0,   1.0,   1.0,   1.0,   1.0,
1.0,   1.0,   1.0,   1.0,   1.0,
1.0,   1.0,   1.0,   1.0,   1.0,
1.0,   1.0,   1.0,   1.0,   0.7,
1.01,  1.01,  1.01,  1.01,  1.01,
1.01,  1.01,  1.01,  1.01,  1.01,
1.01,  1.01,  1.01,  1.01,  1.01,
1.025, 1.025, 1.025, 1.025, 1.025,
1.025, 1.025, 1.025, 1.025, 1.025,
1.025, 1.025, 1.025, 1.025, 1.025,
1.025, 1.025, 1.025, 1.025, 1.025,
1.025, 1.025, 1.025, 1.025, 1.025];
[0.99939,0.99939,0.99939,0.99939,0.99939,
0.99939,0.99939,0.99939,0.99939,0.99939,
0.99939,0.99939,0.99939,0.99939,0.99939,
0.99939,0.99939,0.99939,0.99939,0.99939,
0.99939,0.99939,0.99939,0.99939,0.50188,
0.99168,0.99305,0.99445,0.99588,0.99734,
0.99882,1.00032,1.00183,1.00336,1.0049,
1.00644,1.008,1.00955,1.0111,1.01264,
1.01418,1.01571,1.01722,1.01871,1.02019,
1.02163,1.02305,1.02444,1.0258,1.02712,
1.0284,1.02963,1.03082,1.03196,1.03304,
1.03407,1.03503,1.03593,1.03676,1.03753,
1.03822,1.03883,1.03936,1.0398,1.04016]; "FIX",

"Gamma_vector_comment": "The Gamma vector *must* contain a value for the final T period, even if it is NA or None.",

"timevary_discount_factors":   "Betacorr; setup_Betacorr.m;";
[0.9902111,0.9902111,0.9902111,0.9902111,0.9902111,
0.9902111,0.9902111,0.9902111,0.9902111,0.9902111,
0.9902111,0.9902111,0.9902111,0.9902111,0.9902111,
0.9902111,0.9902111,0.9902111,0.9902111,0.9902111,
0.9902111,0.9902111,0.9902111,0.9902111,0.9902111,
0.8287214,0.981697,0.9803439,0.9791338,0.9780698,
0.9771553,0.9763936,0.9757881,0.9753422,0.9750595,
0.9749437,0.9749984,0.9752274,0.9756346,0.9762239,
0.9769995,0.9779656,0.9791264,0.9804866,0.9820506,
0.9838233,0.9858095,0.9880143,0.9904431,0.9931012,
0.9959943,0.9991282,1.002509,1.006143,1.010037,
1.014198,1.018632,1.023348,1.028352,1.033653,
1.039259,1.045179,1.051422,1.057997,1.064914];
([0.98833531666666700000,0.98835806700000000000,0.98833786000000000000,0.98833494166666600000,0.98833378800000000000,
0.98833367500000000000,0.98836241600000000000,0.98832574033333300000,0.98835727666666600000,0.98833719266666700000,
0.98833250833333300000,0.98835553300000000000,0.98832816033333300000,0.98835339766666700000,0.98833055500000000000,
0.98834685500000000000,0.98833933066666600000,0.98834612833333300000,0.98833140500000000000,0.98834121433333300000,
0.98835224166666600000,0.98834183700000000000,0.98833442533333300000,0.98833947166666700000,0.80682103933333300000,
0.98546714066666700000,0.98416352800000000000,0.98293825600000000000,0.98183391300000000000,0.98079756933333300000,
0.97986007533333300000,0.97905043733333300000,0.97835412600000000000,0.97775637000000100000,0.97731099433333300000,
0.97697671500000000000,0.97681583133333300000,0.97678574866666700000,0.97690852266666600000,0.97720250566666600000,
0.97766649266666700000,0.97830882566666600000,0.97913366366666700000,0.98015067933333300000,0.98138106433333300000,
0.98280659766666700000,0.98444610766666700000,0.98631513166666600000,0.98842655400000000000,0.99075965066666700000,
0.99335897133333300000,0.99622010800000100000,0.99933736566666700000,1.00273829200000000000,1.00643142166667000000,
1.01041532333333000000,1.01471476233333000000,1.01933266866667000000,1.02429270966667000000,1.02958819533333000000,
1.03523085266667000000,1.04126213866667000000,1.04767587333333000000,1.05447411533333000000,1.06170262566667000000]); "FIX",

"survival_probs": "ProbOfAlive; setup_params.m;"
[0.63096,0.63096,0.63096,0.63096,0.63096,
 0.93722,0.93722,0.93722,0.93722,0.93722,
 0.96208,0.96208,0.96208,0.96208,0.96208,
0.97567,0.97567,0.97567,0.97567,0.97567,
0.98439,0.98439,0.98439,0.98439,0.98439,
1.000,1.000,1.000,1.000,1.000,
1.000,1.000,1.000,1.000,1.000,
1.000,1.000,1.000,1.000,1.000,
1.000,1.000,1.000,1.000,1.000,
1.000,1.000,1.000,1.000,1.000,
1.000,1.000,1.000,1.000,1.000,
1.000,1.000,1.000,1.000,1.000,
1.000,1.000,1.000,1.000,1.000];
([0.63095734,0.63095734,0.63095734,0.63095734,0.63095734,
0.93721595,0.93721595,0.93721595,0.93721595,0.93721595,
0.96207901,0.96207901,0.96207901,0.96207901,0.96207901,
0.97567062,0.97567062,0.97567062,0.97567062,0.97567062,
0.98438596,0.98438596,0.98438596,0.98438596,0.98438596,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000,
1.00000000,1.00000000,1.00000000,1.00000000,1.00000000]); "OK", 
"survival_probs_comment" : "We need to ensure that these survival probabilities are correct. Had to adjust them to match OpenCL output. Review creation process for survival_probs."
}
